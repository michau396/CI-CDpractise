name: Unit tests, TODOs to issues and linting

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: read-all

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage  # Ensure coverage tool is installed

      # Run tests with coverage
      - name: Run tests with coverage
        run: |
          coverage run -m unittest discover -s tests -p "*.py"  # Run unittest tests
          coverage report --show-missing                        # Display coverage in terminal
          coverage xml                                           # Generate coverage.xml
      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  lint:
    needs: test  # Run only after the 'test' job completes successfully
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for Super-Linter

      # Cache super-linter
      - name: Cache Super-Linter
        uses: actions/cache@v3
        with:
          path: .cache/super-linter
          key: ${{ runner.os }}-super-linter-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-super-linter-

      # Run Super-Linter
      - name: Run Super-Linter
        uses: super-linter/super-linter/slim@v7.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_RUFF: true  # Specify the linter used
          CACHE_DIR: .cache/super-linter

  todo-to-issue:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Run TODO-to-Issue action
      - name: Create TODOs as Issues
        uses: alstr/todo-to-issue-action@v5
        with:
          INSERT_ISSUE_URLS: "true"  # Links back to issues in TODOs
          CLOSE_ISSUES: "true"       # Automatically close TODOs linked to closed issues
          AUTO_ASSIGN: "true"        # Automatically assign created issues

      # Set Git user for committing changes
      - name: Set Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Commit and push changes back to the repository
      - name: Commit and Push Changes
        run: |
          git add -A
          if [[ `git status --porcelain` ]]; then
            git commit -m "Automatically added GitHub issue links to TODOs"
            git push origin main
          else
            echo "No changes to commit"
          fi
